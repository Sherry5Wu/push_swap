(I DID NOT USE THIS ALGORITHM!!! IT IS JUST FOR KNOWLEDGE)

Radix sort is a non-comparative integer sorting algorithm that sorts numbers by processing individual digits. It operates on the principle that numbers can be sorted digit by digit, from the least 
significant digit to the most significant digit (LSD Radix Sort) or vice versa (MSD Radix Sort). Here’s a detailed explanation of the LSD Radix Sort, which is the more commonly used variant:

How Radix Sort Works
Determine the Maximum Number of Digits:

Identify the number with the maximum digits in the list. This will determine the number of iterations required.
Sorting by Each Digit:

Starting from the least significant digit (rightmost digit), sort the numbers based on that digit using a stable sorting algorithm, like counting sort or bucket sort.
Move to the next significant digit and repeat the process. Continue until the most significant digit has been sorted.
Steps in LSD Radix Sort
Initialize the Data Structure:

Create an array of empty buckets (often 10 buckets for base-10 numbers).
Distribute the Numbers:

For the current digit position (starting with the least significant digit), place each number into the corresponding bucket based on the digit in that position.
Collect the Numbers:

Collect numbers from the buckets and concatenate them back into a single list, preserving the order of numbers within each bucket.
Repeat for All Digit Positions:

Repeat the distribute and collect steps for each digit position, moving from the least significant to the most significant digit.
Example
Given a list of numbers: [170, 45, 75, 90, 802, 24, 2, 66]

Step 1: Sort based on the least significant digit:

Buckets:
0: [170, 90]
1: []
2: [802, 2]
3: []
4: [24]
5: [45, 75]
6: [66]
7: []
8: []
9: []
Collected: [170, 90, 802, 2, 24, 45, 75, 66]
Step 2: Sort based on the next significant digit:

Buckets:
0: [802, 2]
1: []
2: [24]
3: []
4: [45]
5: []
6: [66]
7: [170, 75]
8: []
9: [90]
Collected: [802, 2, 24, 45, 66, 170, 75, 90]
Step 3: Sort based on the most significant digit:

Buckets:
0: [2, 24, 45, 66, 75, 90]
1: [170]
2: []
3: []
4: []
5: []
6: []
7: []
8: [802]
9: []
Collected: [2, 24, 45, 66, 75, 90, 170, 802]

Characteristics:

  Stable: Radix sort preserves the relative order of numbers with the same digit value.
  Complexity: The time complexity is O(d⋅(n + b)), wehre d is the number of digits, n is the number of elements, and 
              b is the base (for decimal numbers,b =10).
  Non-comparative: Unlike comparative sorts (e.g., quicksort, mergesort), radix sort does not compare elements directly.


Applications:

Used for sorting integers, strings, and other types of data where the ordering can be digit-based.
Particularly effective for large datasets with uniformly distributed values.
Non-comparative: Unlike comparative sorts (e.g., quicksort, mergesort), radix sort does not compare elements directly.
Applications
Used for sorting integers, strings, and other types of data where the ordering can be digit-based.
Particularly effective for large datasets with uniformly distributed values.
